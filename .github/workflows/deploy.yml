name: Upload to deploygate
 
on:
  push:
    branches:
    - main

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-11

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_12.5.1.app"
      - name: Show Xcode version
        run: xcodebuild -version

      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      
      - name: Import iOS CodeSign Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        id: develop-certificate
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}

      - name: Import iOS CodeSign Certificates (for distibution)
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          create-keychain: false
          keychain-password: ${{ steps.develop-certificate.outputs.keychain-password }}
          p12-file-base64: ${{ secrets.DISTRIBUTION_CERTIFICATES_FILE_BASE64 }}
          p12-password: ${{ secrets.CERTIFICATES_PASSWORD }}

      - name: Import Android CodeSign Certificates
        run: |
          ANDROID_CERTIFICATES_FILE_PATH=$(pwd)/android/keystore.p12
          echo "ANDROID_CERTIFICATES_FILE_PATH=${ANDROID_CERTIFICATES_FILE_PATH}" >> $GITHUB_ENV
          echo ${{ secrets.ANDROID_CERTIFICATES_FILE_BASE64 }} | base64 -D -o ${ANDROID_CERTIFICATES_FILE_PATH}

      - name: Download Provisioning Profiles
        uses: poad/apple-provisioning-profiles-downloader@v1.0.0
        with: 
          bundle-id: 'com.github.poad.*'
          profile-type: 'IOS_APP_ADHOC'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Download Provisioning Profiles (for distibution)
        uses: poad/apple-provisioning-profiles-downloader@v1.0.0
        with: 
          bundle-id: 'com.github.poad.*'
          profile-type: 'IOS_APP_ADHOC'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure Homebrew cache
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/Homebrew/foo--*
            ~/Library/Caches/Homebrew/downloads/*--foo-*
          key: brew-${{ hashFiles('.github/brew-formulae') }}
          restore-keys: brew-

      - name: Add '--no-document' to gemrc
        run: |
          echo "install: --no-document" >> ~/.gemrc
          echo "update: --no-document" >> ~/.gemrc
          
      - name: Install and update Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew update --preinstall
          cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/watchman.rb" > .github/brew-formulae
          sudo rm '/usr/local/bin/2to3'
          brew link --overwrite python@3.9
          brew upgrade

      - name: Setup watchman
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install watchman
          sudo gem update

      - name: Install node modules
        run: yarn install

      - name: "#️⃣ Update Build Number"
        id: buildnumber
        uses: poad/xcode-build-number-auto-update@v1
        with:
          path: ./ios/ReactNativeAppSample/Info.plist
          new-number: ${{ github.run_number }}

      - name: Generate exportOptions.plist
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
          PROVISONING_PROFILE_UUID: ${{ secrets.PROVISONING_PROFILE_UUID }}
        run: |
          touch ios/exportOptions.plist
          cat exportOptions.plist.template | sed -e s/\$\{PROVISONING_PROFILE_UUID\}/${PROVISONING_PROFILE_UUID}/g | sed -e s/\$\{TEAM_ID\}/${TEAM_ID}/g >> ios/exportOptions.plist
          cat ios/exportOptions.plist

      - name: Test
        run: yarn test

      - name: Build for android
        env:
          ORG_GRADLE_PROJECT_storeFile: ${{ env.ANDROID_CERTIFICATES_FILE_PATH }}
          ORG_GRADLE_PROJECT_storePassword: ${{ secrets.ANDROID_CERTIFICATES_PASSWORD }}
          ORG_GRADLE_PROJECT_keyPassword: ${{ secrets.ANDROID_CERTIFICATES_PASSWORD }}
          ORG_GRADLE_PROJECT_keyAlias: debug
        run: |
          ls ${ORG_GRADLE_PROJECT_storeFile}
          cd android
          ./gradlew assembleRelease

      - name: Cache Pods dependencies
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache Xcode archive
        uses: actions/cache@v1
        with:
          path: ios/Pods
          key: ${{ runner.OS }}-archive-cache-${{ hashFiles('**/ios/ReactNativeAppSample.xcarchive') }}
          restore-keys: |
            ${{ runner.OS }}-archive-cache-

      - name: iOS app build
        env:
          RCT_NO_LAUNCH_PACKAGER: 1
        run: |
          cd ios
          sudo gem install cocoapods && pod install
          xcodebuild -workspace ReactNativeAppSample.xcworkspace -scheme ReactNativeAppSample archive -archivePath ReactNativeAppSample.xcarchive
          xcodebuild -exportArchive -archivePath ./ReactNativeAppSample.xcarchive -exportPath . -exportOptionsPlist exportOptions.plist

      - name: Lookup IPA file
        run: |
          ipa_file_path=$(pwd)/$(ls ./ios/*.ipa)
          if [ -z ${ipa_file_path} ]; then
            echo "IPA file is not found" >2
            exit 1;
          fi
          echo "ipa_file_path=${ipa_file_path}" >> $GITHUB_ENV

      - name: Lookup APK file
        run: |
          apk_file_path=$(pwd)/$(ls ./android/app/build/outputs/apk/release/*.apk)
          if [ -z ${apk_file_path} ]; then
            echo "APK file is not found" >2
            exit 1;
          fi
          echo "apk_file_path=${apk_file_path}" >> $GITHUB_ENV

      - name: Upload IPA file to DeployGate
        env:
          FILE_PATH: ${{ env.ipa_file_path }}
        run: |
          RESULT=$(curl -sSL \
            -H "Authorization: token ${{ secrets.DEPLOYGATE_API_TOKEN }}" \
            -F "file=@${FILE_PATH}" \
            "https://deploygate.com/api/users/poad/apps")
          ERR=$(echo ${RESULT} | jq -c ".error")
          if [ "${ERR}" = "true" ]; then
            echo ${RESULT}
            exit 1;
          fi

      - name: Upload APK file to DeployGate
        env:
          FILE_PATH: ${{ env.apk_file_path }}
        run: |
          RESULT=$(curl -sSL \
            -H "Authorization: token ${{ secrets.DEPLOYGATE_API_TOKEN }}" \
            -F "file=@${FILE_PATH}" \
            "https://deploygate.com/api/users/poad/apps")
          echo ${RESULT}
          ERR=$(echo ${RESULT} | jq -c ".error")
          if [ "${ERR}" = "true" ]; then
            echo ${RESULT}
            exit 1;
          fi

